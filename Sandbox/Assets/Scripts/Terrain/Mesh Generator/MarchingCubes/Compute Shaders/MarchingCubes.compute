#pragma kernel March
#include "/Includes/MarchTables.compute"

static const int numThreads = 8;

struct Triangle {
    float3 vertexA;
    float3 vertexB;
    float3 vertexC;
};

RWStructuredBuffer<uint> points;
RWStructuredBuffer<uint> edge;
AppendStructuredBuffer<Triangle> triangles;

uint Width;
uint Height;
//float3 Origin;

uint valueFromCoord(uint x, uint y, uint z)
{
    // extracting [x%4] byte
    return (points[z * Width * (Width/4) + y * (Width/4) + x/4] >> (8*(x%4))) & 0x000000ff;
}

uint edgeValueFromCoord(uint x, uint y, uint z)
{
    // edge cases
    if (z == Width)
    {
        if (x == Width)
        {            
            return (edge[Width*Height/2 + y/4] >> (8*(y%4))) & 0x000000ff; // corner
        }
        return (edge[y * (Width/4) + x/4] >> (8*(x%4))) & 0x000000ff; // z edge
    }
    if (x == Width)
        return (edge[Width*Height/4 + y * (Width/4) + z/4] >> (8*(z%4))) & 0x000000ff; // x edge

    // normal cases
    return (points[z * Width * (Width/4) + y * (Width/4) + x/4] >> (8*(x%4))) & 0x000000ff;
}

void CubeToTris (uint cubeCorners[8], uint3 index)
{
    // Calculate unique index for each cube configuration.
    // There are 256 possible values
    // A value of 0 means cube is entirely inside surface; 255 entirely outside.
    // The value is used to look up the edge table, which indicates which edges of the cube are cut by the isosurface.

    // int cubeIndex = 0;
    // if (cubeCorners[0] > 127) cubeIndex |= 1;
    // if (cubeCorners[1] > 127) cubeIndex |= 2; 
    // if (cubeCorners[5] > 127) cubeIndex |= 4; 
    // if (cubeCorners[4] > 127) cubeIndex |= 8;
    // if (cubeCorners[2] > 127) cubeIndex |= 16;
    // if (cubeCorners[3] > 127) cubeIndex |= 32; 
    // if (cubeCorners[7] > 127) cubeIndex |= 64; 
    // if (cubeCorners[6] > 127) cubeIndex |= 128;
    int cubeIndex = (cubeCorners[0] & 128) >> 7 | (cubeCorners[1] & 128) >> 6 | (cubeCorners[5] & 128) >> 5 | (cubeCorners[4] & 128) >> 4 | 
                    (cubeCorners[2] & 128) >> 3 | (cubeCorners[3] & 128) >> 2 | (cubeCorners[7] & 128) >> 1 | (cubeCorners[6] & 128);


    
    // Create triangles for current cube configuration
    for (int i = 0; triangulation[cubeIndex][i] != -1; i +=3) {
        float3 val[3];
        // Get indices of corner points A and B for each of the three edges
        // of the cube that need to be joined to form the triangle.
        for (int j = 0; j < 3; j++)
        {
            int edge = triangulation[cubeIndex][i+j];
            int c1 = cornerIndexAFromEdge[edge]; 
            int c2;                     
            float3 vert = {0,0,0};            
            uint3 d = {0,0,0};
            int axis = 0;

            // if ((edge == 1) || (edge == 5) || (edge == 9)  || (edge == 10)) vert.x = 1;
            // if ((edge == 4) || (edge == 5) || (edge == 6)  || (edge == 7)) vert.y = 1;
            // if ((edge == 2) || (edge == 6) || (edge == 10) || (edge == 11)) vert.z = 1;
            vert.x = (edge == 1) | (edge == 5) | (edge == 9)  | (edge == 10);
            vert.y = (edge == 4) | (edge == 5) | (edge == 6)  | (edge == 7);
            vert.z = (edge == 2) | (edge == 6) | (edge == 10) | (edge == 11);
            
            // if ((edge == 0) || (edge == 2) || (edge == 4)  || (edge == 6)) { d.x = 1; axis = 1; }
            // if ((edge == 8) || (edge == 9) || (edge == 10) || (edge == 11)) { d.y = 1; axis = 2; }
            // if ((edge == 1) || (edge == 3) || (edge == 5)  || (edge == 7)) { d.z = 1; axis = 4; }
            d.y = (edge & 8) >> 3; axis |= d.y << 1;
            d.z = edge & 1 & !d.y; axis |= d.z << 2;
            d.x = !d.y & !d.z; axis |= d.x;

            
            if (cubeCorners[c1] <= 127) {
                c2 = c1;
                c1 = cornerIndexBFromEdge[edge];
            }
            else c2 = cornerIndexBFromEdge[edge];

          
            if (cubeCorners[c1] < 255 && cubeCorners[c2] > 0)
            {
                if ((c1 & axis) > 0) 
                {
                    vert += d * (1.0 - ((float)cubeCorners[c1]-128)/(cubeCorners[c1] - cubeCorners[c2]));
                }
                else 
                {
                    vert += d * ((float)cubeCorners[c1]-128)/(cubeCorners[c1] - cubeCorners[c2]);
                }
            }
            else
            {
                if ((c1 & axis) > 0) 
                {
                    vert += d * ((1.0 - (cubeCorners[c1] + cubeCorners[c2] - 128)/255.0));
                }
                else 
                {
                    vert += d * ((cubeCorners[c1] + cubeCorners[c2] - 128)/255.0);
                }  
            }

            val[j] = (float3)index + vert;
        }

        Triangle tri;
        tri.vertexA = val[0];
        tri.vertexB = val[1];
        tri.vertexC = val[2];

        triangles.Append(tri);
    }    
}

[numthreads(numThreads,numThreads,numThreads)]
void March (uint3 id : SV_DispatchThreadID)
{   
    // error check
    if (id.x > Width-1 || id.y >= Height-1 || id.z > Width-1) 
        return;

    uint cubeCorners[8];
    // 8 corners of the current cube
    if (id.x < Width-1 && id.z < Width-1)
    {        
        cubeCorners[0] = valueFromCoord(id.x    , id.y    , id.z    );
        cubeCorners[1] = valueFromCoord(id.x + 1, id.y    , id.z    );
        cubeCorners[2] = valueFromCoord(id.x    , id.y + 1, id.z    );
        cubeCorners[3] = valueFromCoord(id.x + 1, id.y + 1, id.z    );
        cubeCorners[4] = valueFromCoord(id.x    , id.y    , id.z + 1);
        cubeCorners[5] = valueFromCoord(id.x + 1, id.y    , id.z + 1);
        cubeCorners[6] = valueFromCoord(id.x    , id.y + 1, id.z + 1);
        cubeCorners[7] = valueFromCoord(id.x + 1, id.y + 1, id.z + 1);
    }
    else
    {        
        cubeCorners[0] = edgeValueFromCoord(id.x    , id.y    , id.z    );
        cubeCorners[1] = edgeValueFromCoord(id.x + 1, id.y    , id.z    );
        cubeCorners[2] = edgeValueFromCoord(id.x    , id.y + 1, id.z    );
        cubeCorners[3] = edgeValueFromCoord(id.x + 1, id.y + 1, id.z    );
        cubeCorners[4] = edgeValueFromCoord(id.x    , id.y    , id.z + 1);
        cubeCorners[5] = edgeValueFromCoord(id.x + 1, id.y    , id.z + 1);
        cubeCorners[6] = edgeValueFromCoord(id.x    , id.y + 1, id.z + 1);
        cubeCorners[7] = edgeValueFromCoord(id.x + 1, id.y + 1, id.z + 1);
    }

    CubeToTris(cubeCorners, id);    
}